#version 460

layout(set = 0, binding = 0) buffer InputSamples
{
    float inputSamples[];
};
layout(set = 0, binding = 1) buffer OutputSamples
{
    float outputSamples[];
};

layout(push_constant, std430) uniform Window
{
    float samples;
    float width;
};
uint invocationID = gl_GlobalInvocationID.x;
layout(local_size_x = 64) in;
void main()
{
    if(invocationID > width - 1)
    {
        return;
    }
    float samplesPerPixel = samples / width;
    uint iterationCount = uint(samplesPerPixel);
    float offset = float(invocationID) * samplesPerPixel;
    uint index = uint(offset);

    float sum = 0;
    for(uint i = 0; i != iterationCount; ++i)
    {
        sum = max(sum, inputSamples[index + i]);
    }
    float proportion = samplesPerPixel - float(iterationCount);

    float x0 = inputSamples[index + iterationCount - 1];
    float x1 = inputSamples[index + iterationCount];
    float interpolatedSample = ((1.0 - proportion) * x0) + (proportion * x1);

    sum = max(sum, interpolatedSample);

    outputSamples[invocationID * 2] = sum;
    outputSamples[(invocationID * 2) + 1] = -sum;
}
